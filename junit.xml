<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="37" failures="0" time="6.983">
  <testsuite name="EventMessage" errors="0" failures="0" skipped="0" timestamp="2019-11-05T16:02:25" time="2.242" tests="23">
    <testcase classname="EventMessage LogEventTypeAction should get undefined action" name="EventMessage LogEventTypeAction should get undefined action" time="0.005">
    </testcase>
    <testcase classname="EventMessage LogEventTypeAction should get type and action" name="EventMessage LogEventTypeAction should get type and action" time="0.001">
    </testcase>
    <testcase classname="EventMessage AuditEventTypeAction should get undefined action" name="EventMessage AuditEventTypeAction should get undefined action" time="0.001">
    </testcase>
    <testcase classname="EventMessage AuditEventTypeAction should get type and action" name="EventMessage AuditEventTypeAction should get type and action" time="0">
    </testcase>
    <testcase classname="EventMessage TraceEventTypeAction should get undefined action" name="EventMessage TraceEventTypeAction should get undefined action" time="0.011">
    </testcase>
    <testcase classname="EventMessage TraceEventTypeAction should get type and action" name="EventMessage TraceEventTypeAction should get type and action" time="0.001">
    </testcase>
    <testcase classname="EventMessage EventMessage creation should create a log/debug EventMessage" name="EventMessage EventMessage creation should create a log/debug EventMessage" time="0.002">
    </testcase>
    <testcase classname="EventMessage EventMessage creation should create a log/debug EventMessage using a factory method" name="EventMessage EventMessage creation should create a log/debug EventMessage using a factory method" time="0.001">
    </testcase>
    <testcase classname="EventMessage EventMessage creation should create the minimum required EventMessage" name="EventMessage EventMessage creation should create the minimum required EventMessage" time="0">
    </testcase>
    <testcase classname="EventMessage EventMessage creation should create an EventMessage building it" name="EventMessage EventMessage creation should create an EventMessage building it" time="0.001">
    </testcase>
    <testcase classname="EventMessage EventMessage creation EventMetadata factory methods should create an EventMessage with EventType.log" name="EventMessage EventMessage creation EventMetadata factory methods should create an EventMessage with EventType.log" time="0.001">
    </testcase>
    <testcase classname="EventMessage EventMessage creation EventMetadata factory methods should create an EventMessage with EventType.audit" name="EventMessage EventMessage creation EventMetadata factory methods should create an EventMessage with EventType.audit" time="0">
    </testcase>
    <testcase classname="EventMessage EventMessage creation EventMetadata factory methods should create an EventMessage with EventType.trace" name="EventMessage EventMessage creation EventMetadata factory methods should create an EventMessage with EventType.trace" time="0.002">
    </testcase>
    <testcase classname="EventMessage EventMessage creation EventMetadata factory methods should create an EventMessage with EventType.trace" name="EventMessage EventMessage creation EventMetadata factory methods should create an EventMessage with EventType.trace" time="0">
    </testcase>
    <testcase classname="EventMessage EventMessage creation EventMetadata factory methods should create an EventMessage with EventType.log" name="EventMessage EventMessage creation EventMetadata factory methods should create an EventMessage with EventType.log" time="0.001">
    </testcase>
    <testcase classname="EventMessage EventMessage creation should create an EventMetadata using Date as the createdAt type" name="EventMessage EventMessage creation should create an EventMetadata using Date as the createdAt type" time="0.003">
    </testcase>
    <testcase classname="EventMessage EventMessage creation should create an EventTraceMetadata using Date as the createdAt type" name="EventMessage EventMessage creation should create an EventTraceMetadata using Date as the createdAt type" time="0.001">
    </testcase>
    <testcase classname="EventMessage EventMessage creation should create LogResponses of of undefined status" name="EventMessage EventMessage creation should create LogResponses of of undefined status" time="0">
    </testcase>
    <testcase classname="EventMessage EventMessage creation should create LogResponses of of accepted status" name="EventMessage EventMessage creation should create LogResponses of of accepted status" time="0">
    </testcase>
    <testcase classname="EventMessage EventMessage creation should throw Error when creating an EventTraceMetadata with invalid trace id" name="EventMessage EventMessage creation should throw Error when creating an EventTraceMetadata with invalid trace id" time="0.039">
    </testcase>
    <testcase classname="EventMessage EventMessage creation should throw Error when creating an EventTraceMetadata with invalid span id" name="EventMessage EventMessage creation should throw Error when creating an EventTraceMetadata with invalid span id" time="0.003">
    </testcase>
    <testcase classname="EventMessage EventMessage creation should throw Error when creating an EventTraceMetadata with invalid parentSpan id" name="EventMessage EventMessage creation should throw Error when creating an EventTraceMetadata with invalid parentSpan id" time="0.001">
    </testcase>
    <testcase classname="EventMessage getContext should return the context" name="EventMessage getContext should return the context" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="EventLoggingServiceClient" errors="0" failures="0" skipped="1" timestamp="2019-11-05T16:02:25" time="2.425" tests="2">
    <testcase classname="EventLoggingServiceClient throws when content is null or undefined" name="EventLoggingServiceClient throws when content is null or undefined" time="0.015">
    </testcase>
    <testcase classname="EventLoggingServiceClient handles when grpcClient errors" name="EventLoggingServiceClient handles when grpcClient errors" time="0">
      <skipped/>
    </testcase>
    <testcase classname="EventLoggingServiceClient handles all other errors" name="EventLoggingServiceClient handles all other errors" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Tracer" errors="0" failures="0" skipped="0" timestamp="2019-11-05T16:02:25" time="2.544" tests="2">
    <testcase classname="Tracer should create a parent span" name="Tracer should create a parent span" time="0.074">
    </testcase>
    <testcase classname="Tracer should get the child span" name="Tracer should get the child span" time="0.111">
    </testcase>
  </testsuite>
  <testsuite name="JsonToStructMapper" errors="0" failures="0" skipped="0" timestamp="2019-11-05T16:02:28" time="0.257" tests="6">
    <testcase classname="JsonToStructMapper maps to a struct" name="JsonToStructMapper maps to a struct" time="0">
    </testcase>
    <testcase classname="JsonToStructMapper fromAny handles `text/plain` format" name="JsonToStructMapper fromAny handles `text/plain` format" time="0.001">
    </testcase>
    <testcase classname="JsonToStructMapper fromAny handles `application/json` format" name="JsonToStructMapper fromAny handles `application/json` format" time="0.001">
    </testcase>
    <testcase classname="JsonToStructMapper fromAny throws on unsupported type_url" name="JsonToStructMapper fromAny throws on unsupported type_url" time="0.004">
    </testcase>
    <testcase classname="JsonToStructMapper toAny handles `text/plain` format" name="JsonToStructMapper toAny handles `text/plain` format" time="0.001">
    </testcase>
    <testcase classname="JsonToStructMapper toAny handles `application/json` format" name="JsonToStructMapper toAny handles `application/json` format" time="0.001">
    </testcase>
    <testcase classname="JsonToStructMapper toAny handles unknown data types" name="JsonToStructMapper toAny handles unknown data types" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Recorder" errors="0" failures="0" skipped="1" timestamp="2019-11-05T16:02:28" time="0.421" tests="2">
    <testcase classname="Recorder records a message with the DefaultLoggerRecorder" name="Recorder records a message with the DefaultLoggerRecorder" time="0.008">
    </testcase>
    <testcase classname="Recorder records a message with the DefaultSidecarRecorderAsync" name="Recorder records a message with the DefaultSidecarRecorderAsync" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="Span" errors="0" failures="0" skipped="0" timestamp="2019-11-05T16:02:28" time="2.785" tests="2">
    <testcase classname="Span Async Logging returns immediately when ASYNC is on" name="Span Async Logging returns immediately when ASYNC is on" time="0.004">
    </testcase>
    <testcase classname="Span Async Logging waits until logging is complete when ASYNC is off" name="Span Async Logging waits until logging is complete when ASYNC is off" time="2.005">
    </testcase>
  </testsuite>
</testsuites>